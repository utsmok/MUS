# Generated by Django 5.0.6 on 2024-05-19 21:04

import django.core.serializers.json
import django.db.models.deletion
import django_extensions.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Abstract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("text", models.TextField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField()),
                (
                    "alternative_names",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("standardized_name", models.CharField(null=True)),
                ("first_names", models.CharField(null=True)),
                ("last_name", models.CharField(null=True)),
                ("middle_names", models.CharField(null=True)),
                ("initials", models.CharField(null=True)),
                ("prefixes", models.CharField(null=True)),
                ("suffixes", models.CharField(null=True)),
                ("orcid", models.URLField(null=True)),
                ("scopus", models.CharField(null=True)),
                ("isni", models.CharField(null=True)),
                ("openalex_id", models.URLField(null=True)),
                ("openalex_created_date", models.DateField(null=True)),
                ("openalex_updated_date", models.DateTimeField(null=True)),
                ("works_api_url", models.URLField(null=True)),
                ("works_count", models.IntegerField(null=True)),
                ("cited_by_count", models.IntegerField(null=True)),
                (
                    "counts_by_year",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("impact_factor", models.FloatField(null=True)),
                ("h_index", models.IntegerField(null=True)),
                ("i10_index", models.IntegerField(null=True)),
                ("pure_uuid", models.UUIDField(default=None, null=True, unique=True)),
                ("pure_id", models.IntegerField(null=True)),
                ("pure_last_modified", models.DateTimeField(null=True)),
                (
                    "author_links",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("avatar_url", models.URLField(null=True)),
                ("profile_url", models.URLField(null=True)),
                ("research_url", models.URLField(null=True)),
                ("email", models.CharField(null=True)),
                ("searched_name", models.CharField(null=True)),
                ("found_name", models.CharField(null=True)),
                ("match_similarity", models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CrossrefData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataCiteData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OpenAireData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RepositoryData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Authorship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        choices=[
                            ("first", "First"),
                            ("middle", "Middle"),
                            ("last", "Last"),
                            ("-", "Unknown"),
                        ],
                        default="-",
                    ),
                ),
                ("is_corresponding", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authorships",
                        to="xclass_refactor.author",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField()),
                (
                    "faculty",
                    models.CharField(
                        choices=[
                            ("EEMCS", "Eemcs"),
                            ("BMS", "Bms"),
                            ("ET", "Et"),
                            ("ITC", "Itc"),
                            ("TNW", "Tnw"),
                            ("OTHER", "Other"),
                        ]
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["name"], name="xclass_refa_name_35b53c_idx"),
                    models.Index(
                        fields=["faculty"], name="xclass_refa_faculty_a3b4e3_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Affiliation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "years",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("position", models.CharField(blank=True, default="")),
                ("start_date", models.DateField(null=True)),
                ("end_date", models.DateField(null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affiliation_details",
                        to="xclass_refactor.author",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        related_name="affiliations", to="xclass_refactor.group"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField()),
                (
                    "name_acronyms",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    "name_alternatives",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("ror", models.CharField(null=True)),
                ("openalex_id", models.URLField()),
                ("wikipedia", models.URLField(null=True)),
                ("wikidata", models.URLField(null=True)),
                ("openalex_created_date", models.DateField()),
                ("openalex_updated_date", models.DateTimeField()),
                ("country_code", models.CharField(null=True)),
                ("works_count", models.IntegerField(null=True)),
                ("cited_by_count", models.IntegerField(null=True)),
                ("impact_factor", models.FloatField(null=True)),
                ("h_index", models.IntegerField(null=True)),
                ("i10_index", models.IntegerField(null=True)),
                ("image_thumbnail_url", models.URLField(null=True)),
                ("image_url", models.URLField(null=True)),
                (
                    "lineage",
                    models.ManyToManyField(
                        related_name="org_children", to="xclass_refactor.organization"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Funder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("openalex_id", models.URLField()),
                ("name", models.CharField()),
                (
                    "alternate_names",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("country_code", models.CharField(null=True)),
                (
                    "counts_by_year",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                ("openalex_created_date", models.DateField()),
                ("openalex_updated_date", models.DateTimeField()),
                ("grants_count", models.IntegerField()),
                ("description", models.CharField(null=True)),
                ("homepage_url", models.URLField(null=True)),
                ("ror", models.URLField(null=True)),
                ("wikidata", models.URLField(null=True)),
                ("crossref", models.CharField(null=True)),
                ("doi", models.URLField(null=True)),
                ("image_thumbnail_url", models.URLField(null=True)),
                ("image_url", models.URLField(null=True)),
                ("impact_factor", models.FloatField()),
                ("h_index", models.IntegerField()),
                ("i10_index", models.IntegerField()),
                ("works_count", models.IntegerField()),
                ("cited_by_count", models.IntegerField()),
                (
                    "as_other_funders",
                    models.ManyToManyField(
                        related_name="other_funders_entries",
                        to="xclass_refactor.funder",
                    ),
                ),
                (
                    "as_orgs",
                    models.ManyToManyField(
                        related_name="as_funders", to="xclass_refactor.organization"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="author",
            name="affiliations",
            field=models.ManyToManyField(
                related_name="authors",
                through="xclass_refactor.Affiliation",
                to="xclass_refactor.organization",
            ),
        ),
        migrations.AddField(
            model_name="affiliation",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="affiliation_details",
                to="xclass_refactor.organization",
            ),
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("openalex_id", models.URLField(null=True)),
                ("openalex_created_date", models.DateField(null=True)),
                ("openalex_updated_date", models.DateTimeField(null=True)),
                ("name", models.CharField()),
                (
                    "alternate_names",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("country_code", models.CharField(null=True)),
                (
                    "counts_by_year",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                ("hierarchy_level", models.IntegerField()),
                ("ror", models.CharField(null=True)),
                ("wikidata", models.URLField(null=True)),
                ("image_url", models.URLField(null=True)),
                ("image_thumbnail_url", models.URLField(null=True)),
                ("sources_api_url", models.URLField(null=True)),
                ("impact_factor", models.FloatField()),
                ("h_index", models.IntegerField()),
                ("i10_index", models.IntegerField()),
                ("works_count", models.IntegerField()),
                (
                    "as_funder",
                    models.ManyToManyField(
                        related_name="as_publisher", to="xclass_refactor.funder"
                    ),
                ),
                (
                    "as_institution",
                    models.ManyToManyField(
                        related_name="as_publisher", to="xclass_refactor.organization"
                    ),
                ),
                (
                    "lineage",
                    models.ManyToManyField(
                        related_name="publ_children", to="xclass_refactor.publisher"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("openalex_id", models.URLField()),
                ("openalex_created_date", models.DateField()),
                ("openalex_updated_date", models.DateTimeField()),
                ("is_in_doaj", models.BooleanField(default=False)),
                ("is_oa", models.BooleanField(default=False)),
                ("country_code", models.CharField(null=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("J", "Journal"),
                            ("BS", "Book Series"),
                            ("R", "Repository"),
                            ("EP", "Ebook Platform"),
                            ("C", "Conference"),
                            ("M", "Metadata"),
                            ("U", "Unknown"),
                        ],
                        default="U",
                    ),
                ),
                ("title", models.CharField()),
                (
                    "alternate_titles",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("abbreviated_title", models.CharField(null=True)),
                ("homepage_url", models.URLField(null=True)),
                ("host_org_name", models.CharField(null=True)),
                ("issn_l", models.CharField(null=True)),
                (
                    "issn",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("wikidata", models.URLField(null=True)),
                ("fatcat", models.URLField(null=True)),
                ("mag", models.CharField(null=True)),
                ("cited_by_count", models.IntegerField()),
                (
                    "counts_by_year",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("works_api_url", models.URLField()),
                ("works_count", models.IntegerField()),
                ("impact_factor", models.FloatField()),
                ("h_index", models.IntegerField()),
                ("i10_index", models.IntegerField()),
                (
                    "apc_prices",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("apc_usd", models.IntegerField(null=True)),
                (
                    "lineage",
                    models.ManyToManyField(
                        related_name="children", to="xclass_refactor.publisher"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="organization",
            name="repositories",
            field=models.ManyToManyField(
                related_name="repositories", to="xclass_refactor.source"
            ),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("J", "Journal"),
                            ("BS", "Book Series"),
                            ("R", "Repository"),
                            ("EP", "Ebook Platform"),
                            ("C", "Conference"),
                            ("M", "Metadata"),
                            ("U", "Unknown"),
                        ],
                        default=None,
                        null=True,
                    ),
                ),
                ("is_oa", models.BooleanField(default=False)),
                ("landing_page_url", models.URLField(null=True)),
                ("pdf_url", models.URLField(null=True)),
                ("license", models.CharField(null=True)),
                ("license_id", models.CharField(null=True)),
                ("version", models.CharField(null=True)),
                ("is_accepted", models.BooleanField(default=False)),
                ("is_published", models.BooleanField(default=False)),
                ("is_primary", models.BooleanField(default=False)),
                ("is_best_oa", models.BooleanField(default=False)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="xclass_refactor.source",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DealData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "dealtype",
                    models.CharField(
                        choices=[
                            ("FL", "100% APC discount for UT authors"),
                            ("20", "20% APC discount for UT authors"),
                            ("15", "15% APC discount for UT authors"),
                            ("10", "10% APC discount for UT authors"),
                            ("PR", "Probably no APC costs"),
                            ("NO", "No APC discount"),
                            ("UN", "APC costs unknown"),
                        ],
                        default="UN",
                    ),
                ),
                (
                    "issns",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("jb_url", models.URLField()),
                (
                    "keywords",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("journal_title", models.CharField()),
                ("publisher_name", models.CharField(blank=True, default="")),
                ("openalex_id", models.URLField(unique=True)),
                ("openalex_display_name", models.CharField(blank=True, default="")),
                (
                    "openalex_issn",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "openalex_issn_l",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("openalex_type", models.CharField(blank=True, default="")),
                (
                    "related_sources",
                    models.ManyToManyField(
                        db_index=True, related_name="deals", to="xclass_refactor.source"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "tag_type",
                    models.CharField(
                        choices=[
                            ("PR", "Peer Reviewed"),
                            ("OR", "Only Repo"),
                            ("FR", "Found In Repository"),
                            ("RF", "Repo Found In Openalex"),
                            ("IA", "Institute Author Match"),
                            ("HE", "Has Error"),
                            ("GN", "Generic"),
                            ("OT", "Org Type"),
                        ],
                        default="GN",
                        max_length=2,
                    ),
                ),
                ("notes", models.CharField(blank=True, default="")),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="organization",
            name="types",
            field=models.ManyToManyField(
                related_name="organization_types", to="xclass_refactor.tag"
            ),
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("description", models.CharField()),
                ("name", models.CharField()),
                (
                    "domain",
                    models.CharField(
                        choices=[
                            ("Physical Sciences", "Physical Sciences"),
                            ("Social Sciences", "Social Sciences"),
                            ("Health Sciences", "Health Sciences"),
                            ("Life Sciences", "Life Sciences"),
                        ]
                    ),
                ),
                (
                    "field",
                    models.CharField(
                        choices=[
                            ("Medicine", "Medicine"),
                            ("Social Sciences", "Social Sciences"),
                            ("Engineering", "Engineering"),
                            ("Arts and Humanities", "Arts And Humanities"),
                            ("Computer Science", "Computer Science"),
                            (
                                "Biochemistry, Genetics and Molecular Biology",
                                "Biochemistry Genetics And Molecular Biology",
                            ),
                            (
                                "Agricultural and Biological Sciences",
                                "Agricultural And Biological Sciences",
                            ),
                            ("Environmental Science", "Environmental Science"),
                            ("Physics and Astronomy", "Physics And Astronomy"),
                            (
                                "Business, Management and Accounting",
                                "Business Management And Accounting",
                            ),
                            ("Materials Science", "Materials Science"),
                            (
                                "Economics, Econometrics and Finance",
                                "Economics Econometrics And Finance",
                            ),
                            ("Health Professions", "Health Professions"),
                            ("Psychology", "Psychology"),
                            ("Chemistry", "Chemistry"),
                            (
                                "Earth and Planetary Sciences",
                                "Earth And Planetary Sciences",
                            ),
                            ("Neuroscience", "Neuroscience"),
                            ("Mathematics", "Mathematics"),
                            (
                                "Immunology and Microbiology",
                                "Immunology And Microbiology",
                            ),
                            ("Decision Sciences", "Decision Sciences"),
                            ("Energy", "Energy"),
                            ("Nursing", "Nursing"),
                            (
                                "Pharmacology, Toxicology and Pharmaceutics",
                                "Pharmacology Toxicology And Pharmaceuticals",
                            ),
                            ("Dentistry", "Dentistry"),
                            ("Chemical Engineering", "Chemical Engineering"),
                            ("Veterinary", "Veterinary"),
                        ]
                    ),
                ),
                ("openalex_id", models.URLField(unique=True)),
                ("works_count", models.IntegerField()),
                (
                    "keywords",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                ("wikipedia", models.URLField()),
                ("subfield", models.CharField()),
                ("subfield_id", models.IntegerField()),
                (
                    "siblings",
                    models.ManyToManyField(
                        related_name="set_siblings", to="xclass_refactor.topic"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SourceTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("count", models.IntegerField()),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_topics",
                        to="xclass_refactor.source",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_topics",
                        to="xclass_refactor.topic",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="source",
            name="topics",
            field=models.ManyToManyField(
                related_name="sources",
                through="xclass_refactor.SourceTopic",
                to="xclass_refactor.topic",
            ),
        ),
        migrations.CreateModel(
            name="OrganizationTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("count", models.IntegerField()),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_topics",
                        to="xclass_refactor.organization",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_topics",
                        to="xclass_refactor.topic",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="organization",
            name="topics",
            field=models.ManyToManyField(
                related_name="organizations",
                through="xclass_refactor.OrganizationTopic",
                to="xclass_refactor.topic",
            ),
        ),
        migrations.AddField(
            model_name="author",
            name="topics",
            field=models.ManyToManyField(
                related_name="authors", to="xclass_refactor.topic"
            ),
        ),
        migrations.CreateModel(
            name="Work",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("openalex_id", models.URLField(null=True)),
                ("openalex_created_date", models.DateField(null=True)),
                ("openalex_updated_date", models.DateTimeField(null=True)),
                ("ngrams_url", models.URLField(null=True)),
                ("cited_by_api_url", models.URLField(null=True)),
                ("cited_by_count", models.IntegerField(null=True)),
                (
                    "cited_by_percentile_year",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("referenced_works_count", models.IntegerField(null=True)),
                ("doi", models.CharField(null=True)),
                ("title", models.CharField()),
                ("publication_year", models.IntegerField()),
                ("publication_date", models.DateField()),
                ("pmid", models.CharField(null=True)),
                ("pmcid", models.CharField(null=True)),
                ("isbn", models.CharField(null=True)),
                ("mag", models.CharField(null=True)),
                ("language", models.CharField(null=True)),
                (
                    "mesh_terms",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("type_crossref", models.CharField(null=True)),
                ("volume", models.CharField(null=True)),
                ("issue", models.CharField(null=True)),
                ("first_page", models.CharField(null=True)),
                ("last_page", models.CharField(null=True)),
                ("pages", models.CharField(null=True)),
                ("article_number", models.CharField(null=True)),
                ("locations_count", models.IntegerField(null=True)),
                ("is_oa", models.BooleanField(default=False)),
                (
                    "oa_status",
                    models.CharField(
                        choices=[
                            ("gold", "Gold"),
                            ("bronze", "Bronze"),
                            ("green", "Green"),
                            ("hybrid", "Hybrid"),
                            ("closed", "Closed"),
                            ("not_set", "Not Set"),
                        ],
                        default="not_set",
                    ),
                ),
                ("oa_url", models.URLField(null=True)),
                ("is_also_green", models.BooleanField(default=False)),
                (
                    "itemtype",
                    models.CharField(
                        choices=[
                            ("book", "Book"),
                            ("conference_proceeding", "Conference Proceeding"),
                            ("journal_article", "Journal Article"),
                            ("dissertation", "Dissertation"),
                            ("report", "Report"),
                            ("other", "Other"),
                            ("not_set", "Not Set"),
                        ],
                        default="not_set",
                    ),
                ),
                (
                    "apc_listed",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    "apc_paid",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("has_fulltext", models.BooleanField(default=False)),
                ("is_paratext", models.BooleanField(default=False)),
                ("is_retracted", models.BooleanField(default=False)),
                (
                    "indexed_in",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    "keywords",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    "sdgs",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    "versions",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("found_in_institute_repo", models.BooleanField(default=False)),
                (
                    "repo_keywords",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("found_in_openaire", models.BooleanField(default=False)),
                ("found_in_datacite", models.BooleanField(default=False)),
                ("found_in_crossref", models.BooleanField(default=False)),
                (
                    "abstract",
                    models.OneToOneField(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="xclass_refactor.abstract",
                    ),
                ),
                (
                    "authors",
                    models.ManyToManyField(
                        related_name="works",
                        through="xclass_refactor.Authorship",
                        to="xclass_refactor.author",
                    ),
                ),
                (
                    "crossref_data",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="xclass_refactor.crossrefdata",
                    ),
                ),
                (
                    "datacite_data",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="xclass_refactor.datacitedata",
                    ),
                ),
                (
                    "journal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="journals",
                        to="xclass_refactor.source",
                    ),
                ),
                (
                    "locations",
                    models.ManyToManyField(
                        related_name="works", to="xclass_refactor.location"
                    ),
                ),
                (
                    "openaire_data",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="xclass_refactor.openairedata",
                    ),
                ),
                (
                    "primary_topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="primary_works",
                        to="xclass_refactor.topic",
                    ),
                ),
                (
                    "repo_data",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="xclass_refactor.repositorydata",
                    ),
                ),
                (
                    "topics",
                    models.ManyToManyField(
                        related_name="works", to="xclass_refactor.topic"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Grant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("award_id", models.CharField(null=True)),
                ("funder_name", models.CharField()),
                ("openalex_id", models.URLField()),
                (
                    "funder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grants",
                        to="xclass_refactor.funder",
                    ),
                ),
                (
                    "works",
                    models.ManyToManyField(
                        related_name="grants", to="xclass_refactor.work"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="authorship",
            name="work",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="authorships",
                to="xclass_refactor.work",
            ),
        ),
        migrations.CreateModel(
            name="MongoData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    "source_collection",
                    models.CharField(
                        choices=[
                            ("works_openalex", "Works Openalex"),
                            ("authors_openalex", "Authors Openalex"),
                            ("topics_openalex", "Topics Openalex"),
                            ("sources_openalex", "Sources Openalex"),
                            ("funders_openalex", "Funders Openalex"),
                            ("publishers_openalex", "Publishers Openalex"),
                            ("institutions_openalex", "Institutions Openalex"),
                            ("authors_pure", "Authors Pure"),
                            ("employees_peoplepage", "Employees Peoplepage"),
                            ("deals_journalbrowser", "Deals Journalbrowser"),
                            ("items_crossref", "Items Crossref"),
                            ("items_datacite", "Items Datacite"),
                            ("items_openaire", "Items Openaire"),
                            ("items_orcid", "Items Orcid"),
                        ]
                    ),
                ),
                ("source_id", models.CharField()),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id", "source_collection"],
                        name="xclass_refa_content_43da1d_idx",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(
                fields=["openalex_id"], name="xclass_refa_openale_16640e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(fields=["doi"], name="xclass_refa_doi_acaffd_idx"),
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(fields=["ror"], name="xclass_refa_ror_a16763_idx"),
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(
                fields=["crossref"], name="xclass_refa_crossre_bb7896_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(
                fields=["country_code"], name="xclass_refa_country_d5890a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(
                fields=["image_url"], name="xclass_refa_image_u_f24146_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(
                fields=["image_thumbnail_url"], name="xclass_refa_image_t_0cf49b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="funder",
            index=models.Index(
                fields=["wikidata"], name="xclass_refa_wikidat_48db08_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="affiliation",
            index=models.Index(
                fields=["author", "organization"], name="xclass_refa_author__1b8e8a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="affiliation",
            index=models.Index(
                fields=["organization", "author"], name="xclass_refa_organiz_e7cbda_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="affiliation",
            index=models.Index(fields=["years"], name="xclass_refa_years_6ebc6e_idx"),
        ),
        migrations.AddIndex(
            model_name="tag",
            index=models.Index(
                fields=["content_type", "object_id", "tag_type"],
                name="xclass_refa_content_630ed8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="topic",
            index=models.Index(
                fields=["openalex_id"], name="xclass_refa_openale_337498_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="topic",
            index=models.Index(
                fields=["wikipedia"], name="xclass_refa_wikiped_38df7f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sourcetopic",
            index=models.Index(
                fields=["source", "topic"], name="xclass_refa_source__315510_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organizationtopic",
            index=models.Index(
                fields=["organization", "topic"], name="xclass_refa_organiz_8219c4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["openalex_id"], name="xclass_refa_openale_35031e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(fields=["ror"], name="xclass_refa_ror_78801c_idx"),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["wikipedia"], name="xclass_refa_wikiped_b57795_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["wikidata"], name="xclass_refa_wikidat_e327af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["country_code"], name="xclass_refa_country_518351_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["image_url"], name="xclass_refa_image_u_3252f4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organization",
            index=models.Index(
                fields=["image_thumbnail_url"], name="xclass_refa_image_t_5c97c5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(
                fields=["openalex_id"], name="xclass_refa_openale_225cb8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="work",
            index=models.Index(
                fields=["openalex_id"], name="xclass_refa_openale_59560a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="work",
            index=models.Index(fields=["doi"], name="xclass_refa_doi_fa9902_idx"),
        ),
        migrations.AddIndex(
            model_name="work",
            index=models.Index(
                fields=["publication_date"], name="xclass_refa_publica_8f93bf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="work",
            index=models.Index(
                fields=["publication_year"], name="xclass_refa_publica_0e6c39_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="work",
            index=models.Index(
                fields=["oa_status"], name="xclass_refa_oa_stat_9a59ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="work",
            index=models.Index(
                fields=["itemtype"], name="xclass_refa_itemtyp_c47956_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grant",
            index=models.Index(
                fields=["openalex_id"], name="xclass_refa_openale_e3965f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grant",
            index=models.Index(
                fields=["award_id"], name="xclass_refa_award_i_b32521_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authorship",
            index=models.Index(
                fields=["author", "work"], name="xclass_refa_author__6b4b32_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authorship",
            index=models.Index(
                fields=["work", "author"], name="xclass_refa_work_id_575e83_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authorship",
            index=models.Index(
                condition=models.Q(("is_corresponding", True)),
                fields=["is_corresponding"],
                name="cor_index",
            ),
        ),
    ]
